/************************************************************************************************
 * This code was automatically generated by Digital Twin Code Generator tool 0.6.8.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 *
 * Generated Date: 2/19/2020
 ***********************************************************************************************/

#ifndef SAMPLE_DEVICE_IMPL_H
#define SAMPLE_DEVICE_IMPL_H

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include "pnp_schema_types.h"

/**
* Device telemetries related methods.
*/

double Sensor_Telemetry_ReadTemp();

double Sensor_Telemetry_ReadHumid();

void Sensor_Telemetry_ReadLocation(SENSOR_LOCATION * location);

/**
* Device properties related methods.
*/

char* Deviceinfo_Property_GetManufacturer();

char* Deviceinfo_Property_GetModel();

char* Deviceinfo_Property_GetSwVersion();

char* Deviceinfo_Property_GetOsName();

char* Deviceinfo_Property_GetProcessorArchitecture();

char* Deviceinfo_Property_GetProcessorManufacturer();

long Deviceinfo_Property_GetTotalStorage();

long Deviceinfo_Property_GetTotalMemory();

bool Sensor_Property_GetState();

bool Sensor_Property_NameCallback(char* name);

bool Sensor_Property_BrightnessCallback(long brightness);

/**
* Device commands related methods.
*/

DIGITALTWIN_COMMAND_RESULT Sensor_Command_Blink(long interval, SENSOR_BLINK_blinkResponse* response, unsigned int* statusCode);

DIGITALTWIN_COMMAND_RESULT Sensor_Command_UpdateFirmware(SENSOR_UPDATEFIRMWARE_firmwareRequest *firmwareRequest, SENSOR_UPDATEFIRMWARE_updateFirmwareResponse* response, unsigned int* statusCode);

DIGITALTWIN_COMMAND_RESULT Sensor_Command_Turnon(unsigned int* statusCode);

DIGITALTWIN_COMMAND_RESULT Sensor_Command_Turnoff(unsigned int* statusCode);

DIGITALTWIN_COMMAND_RESULT Sensor_Command_Rundiagnostics();

// Callbacks to handle the confirmation result of sending telemetry
void SendTelemetry_Succeeded_Callback(const char* interfaceName);
void SendTelemetry_Error_Callback(const char* interfaceName);

// Callbacks to handle the confirmation result of reporting property
void ReportProperty_Succeeded_Callback(const char* interfaceName, const char* propertyName);
void ReportProperty_Error_Callback(const char* interfaceName, const char* propertyName);

#ifdef __cplusplus
}
#endif

#endif // SAMPLE_DEVICE_IMPL_H
